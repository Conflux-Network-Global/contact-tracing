{"version":3,"sources":["components/ContactPage/ContactPage.js","components/CardContainer/CardContainer.js","components/ConnectPage/ConnectPage.js","components/HealthPage/HealthPage.js","App.js","serviceWorker.js","index.js"],"names":["abi","require","abiReg","web3","Web3","txParams","gas","util","format","hex","gasPrice","unit","fromGDripToDrip","ContactPage","reg","ind","React","useState","contractObj","registered","setRegistered","initial","setInitial","text","hash","tx","personal","setPersonal","contact","setContact","useEffect","getIndividual","call","from","window","conflux","selectedAddress","then","res","console","log","contract","confluxJS","Contract","address","setContract","data","localStorage","getItem","JSON","parse","prev","length","payload","timestamp","Date","push","setItem","stringify","registerClick","a","newRegistration","to","storageLimit","send","buttonClick","obj","setObj","functionCall","contractABI","contractInst","inputHex","Buffer","eth","encodeFunctionCall","filter","func","name","setTimeout","receipt","decodeLog","logs","array","Fragment","variant","color","size","className","disabled","onClick","my","label","onChange","event","input","target","value","justifyContent","CardContainer","children","page","Card","CardContent","Box","Typography","CardActions","IconButton","state","set","ConnectPage","installed","setInstalled","connect","enable","Button","open","HealthPage","healthy","setHealthy","status","setStatus","trigger","setTrigger","checking","setChecking","getStatus","colorPicker","toggleHealth","checkContacts","dataNew","alert","i","checkHealth","moment","diff","pb","CircularProgress","addresses","App","provider","setProvider","regContract","setRegContract","indContract","registration","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8d8c7c40.chunk.js","sourcesContent":["import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport \"./ContactPage.css\";\nimport { util } from \"js-conflux-sdk\";\nimport Web3 from \"web3\";\nconst abi = require(\"../../assets/individual-abi.json\");\nconst abiReg = require(\"../../assets/registration-abi.json\");\nconst web3 = new Web3();\n\nconst txParams = {\n  gas: util.format.hex(2000000),\n  gasPrice: util.unit.fromGDripToDrip(0.0000001),\n};\n\nconst ContactPage = ({ reg, ind }) => {\n  const [registered, setRegistered] = React.useState(!!ind.contractObj);\n  const [initial, setInitial] = React.useState(true);\n  const [personal, setPersonal] = React.useState({\n    text: \"\",\n    hash: \"\",\n    tx: false,\n  });\n  const [contact, setContact] = React.useState({\n    text: \"\",\n    hash: \"\",\n    tx: false,\n  });\n\n  //initialize getting individual contract or button for registration\n  React.useEffect(() => {\n    if (!ind.contractObj) {\n      reg\n        .getIndividual()\n        .call({ from: window.conflux.selectedAddress })\n        .then((res) => {\n          console.log(res);\n          // console.log(util.format.hex(Buffer.from(\"abcdefghijklmnopqrsasdfasgawevasdfaevasefasvawegags tv\")));\n          if (res !== \"0x0000000000000000000000000000000000000000\") {\n            const contract = window.confluxJS.Contract({\n              abi: abi,\n              address: res,\n            });\n            ind.setContract(contract);\n            setRegistered(true);\n          }\n          setInitial(false);\n        });\n    }\n  }, [reg, ind]);\n\n  //save payload addresses to local storage\n  React.useEffect(() => {\n    let data = window.localStorage.getItem(\"contactTracing\");\n    data = JSON.parse(data);\n    console.log(data);\n\n    //if no personal hash is present, and there is a stored one in localstorage, use that\n    if (!personal.hash && !!data) {\n      setPersonal(prev => {return {...prev, hash: data[data.length-1].personal}})\n    }\n\n    //if both are set, store the pair and timestamp\n    if (!!personal.hash && !!contact.hash) {\n      const payload = {personal: personal.hash, contact: contact.hash, timestamp: new Date()};\n      if (!data) {\n        data = [payload];\n      } else {\n        data.push(payload)\n      }\n      window.localStorage.setItem(\"contactTracing\", JSON.stringify(data))\n    }\n  }, [personal.hash, contact.hash])\n\n  //registration button click + transaction parameters\n  const registerClick = async () => {\n    const data = reg.newRegistration().data;\n    console.log(data);\n\n    const tx = {\n      ...txParams,\n      from: window.conflux.selectedAddress,\n      to: reg.address,\n      data,\n      storageLimit: util.format.hex(3000),\n    };\n    const res = await window.conflux.send(\"cfx_sendTransaction\", [tx]);\n    // const res = await window.conflux.send(\"cfx_getTransactionByHash\", [\"0x45dde1ec907e3d2e896ba98c07b5b01c463e8a493ba986db878ccc2f54e20d8a\"]);\n    console.log(res);\n    setRegistered(true);\n  };\n\n  //generalized handler for payload registration (personal + contact)\n  const buttonClick = async (\n    obj,\n    setObj,\n    functionCall,\n    contractABI,\n    contractInst\n  ) => {\n    // setPersonalTx(true);\n    setObj((prev) => {\n      return { ...prev, tx: true };\n    });\n    const inputHex = util.format.hex(Buffer.from(obj.text));\n    const data = web3.eth.abi.encodeFunctionCall(\n      contractABI.filter((func) => func.name === functionCall)[0],\n      [inputHex]\n    );\n\n    const tx = {\n      ...txParams,\n      from: window.conflux.selectedAddress,\n      to: contractInst.address,\n      data,\n      storageLimit: util.format.hex(100),\n    };\n\n    try {\n      const res = await window.conflux.send(\"cfx_sendTransaction\", [tx]);\n      console.log(res);\n\n      setTimeout(async () => {\n        const receipt = await window.conflux.send(\"cfx_getTransactionReceipt\", [\n          res,\n        ]);\n        console.log(receipt);\n        const hash = contractInst.abi.decodeLog(receipt.logs[0]).array[0];\n        console.log(hash);\n        if (!!receipt) {\n          setObj({ text: \"\", hash, tx: false });\n        }\n      }, 10000);\n    } catch (e) {\n      setObj((prev) => {\n        return { ...prev, tx: false };\n      });\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"caption\">\n        New users: Please register below.{\" \"}\n      </Typography>\n      <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"large\"\n        className=\"Button\"\n        disabled={registered || initial}\n        onClick={registerClick}\n      >\n        Register User\n      </Button>\n      <Box my={1}>\n        <Typography variant=\"caption\">\n          Use the following to register personal payloads:{\" \"}\n        </Typography>\n        <Box className=\"ContactPage-Box\">\n          <TextField\n            label=\"Personal Payload\"\n            variant=\"outlined\"\n            onChange={(event) => {\n              const input = event.target.value;\n              setPersonal((prev) => {\n                return { ...prev, text: input };\n              });\n            }}\n            value={personal.text}\n            disabled={personal.tx}\n          />\n          {personal.tx ? (\n            <Box className=\"Button\" justifyContent=\"center\">\n              <CircularProgress />\n            </Box>\n          ) : (\n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              size=\"large\"\n              className=\"Button\"\n              disabled={!registered}\n              onClick={() =>\n                buttonClick(\n                  personal,\n                  setPersonal,\n                  \"registerPayload\",\n                  abiReg,\n                  reg\n                )\n              }\n            >\n              Register Payload\n            </Button>\n          )}\n        </Box>\n      </Box>\n      <Typography variant=\"caption\">\n        Use the following to track contact payloads:{\" \"}\n      </Typography>\n      <Box className=\"ContactPage-Box\">\n        <TextField\n          label=\"Contact Payload\"\n          variant=\"outlined\"\n          onChange={(event) => {\n            const input = event.target.value;\n            setContact((prev) => {\n              return { ...prev, text: input };\n            });\n          }}\n          value={contact.text}\n          disabled={contact.tx}\n        />\n        {contact.tx ? (\n          <Box className=\"Button\" justifyContent=\"center\">\n            <CircularProgress />\n          </Box>\n        ) : (\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            size=\"large\"\n            className=\"Button\"\n            disabled={!registered || !personal.hash}\n            onClick={() =>\n              buttonClick(\n                contact,\n                setContact,\n                \"contact\",\n                abi,\n                ind.contractObj\n              )\n            }\n          >\n            Report Contact\n          </Button>\n        )}\n      </Box>\n    </React.Fragment>\n  );\n};\n\nexport default ContactPage;\n","import React from \"react\";\nimport \"./CardContainer.css\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\n\nexport default function CardContainer({ children, page, ind }) {\n  return (\n    <Card>\n      <CardContent>\n        <Box className=\"CardContainer-Box\">\n          <Typography variant=\"h4\">Conflux Contact Tracing</Typography>\n          <Box className=\"CardContainer-SubBox\">{children}</Box>\n        </Box>\n      </CardContent>\n      <CardActions className=\"CardContainer-Buttons\">\n        <IconButton\n          disabled={page.state === 0 || page.state === 1}\n          onClick={() => page.set(page.state - 1)}\n          color=\"primary\"\n        >\n          <ChevronLeftIcon />\n        </IconButton>\n        <IconButton\n          disabled={page.state === 0 || page.state === 2 || !ind}\n          onClick={() => page.set(page.state + 1)}\n          color=\"primary\"\n        >\n          <ChevronRightIcon />\n        </IconButton>\n      </CardActions>\n    </Card>\n  );\n}\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\nconst ConnectPage = ({set}) => {\n  const [installed, setInstalled] = React.useState(false);\n\n  React.useEffect(() => {\n    // console.log(window.conflux);\n    setInstalled(!!window.conflux);\n  }, []);\n\n  const install = () => {\n    window.open(\"https://portal.conflux-chain.org/\");\n  };\n\n  //handler for connecting to conflux portal\n  const connect = async () => {\n    await window.conflux.enable();\n    set(window['conflux']);\n  }\n\n  return (\n    <React.Fragment>\n      <Typography variant=\"h6\">\n        To get started, please {installed ? \"connect to \" : \"install \"}\n        ConfluxPortal\n      </Typography>\n      {installed ? (\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          className=\"Button\"\n          onClick={connect}\n        >\n          Connect\n        </Button>\n      ) : (\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          className=\"Button\"\n          onClick={install}\n        >\n          Install ConfluxPortal\n        </Button>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default ConnectPage;\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { util } from \"js-conflux-sdk\";\nimport moment from \"moment\";\nimport \"./HealthPage.css\";\n\nconst HealthPage = ({ reg, ind }) => {\n  const [healthy, setHealthy] = React.useState(\"--\");\n  const [status, setStatus] = React.useState(\"--\");\n  const [trigger, setTrigger] = React.useState(false);\n  const [checking, setChecking] = React.useState(false);\n\n  //checking personal health status when page loads\n  React.useEffect(() => {\n    setHealthy(\"--\");\n    ind\n      .getStatus()\n      .call({ from: window.conflux.selectedAddress })\n      .then((res) => {\n        const health = res ? \"Yes\" : \"No\";\n        setHealthy(health);\n      });\n  }, [ind, trigger]);\n\n  const colorPicker = (value) => {\n    return value === \"No\" || value === \"Infected Contact\" ? \"error\" : \"inherit\";\n  };\n\n  //transaction parameters to toggle health\n  const toggleHealth = async () => {\n    const data = ind.toggleHealth().data;\n    // console.log(data);\n    // const estimate = await ind.toggleHealth().estimateGasAndCollateral();\n    // console.log(estimate);\n\n    const tx = {\n      to: ind.address,\n      from: window.conflux.selectedAddress,\n      data,\n      gas: util.format.hex(2000000),\n      gasPrice: util.unit.fromGDripToDrip(0.0000001),\n      // storageLimit: util.format.hex(3000)\n    };\n    const res = await window.conflux.send(\"cfx_sendTransaction\", [tx]);\n    // const res = await window.conflux.send(\"cfx_getTransactionByHash\", [\"0x45dde1ec907e3d2e896ba98c07b5b01c463e8a493ba986db878ccc2f54e20d8a\"]);\n    console.log(res);\n    setTimeout(() => setTrigger(!trigger), 10000);\n  };\n\n  //button handler for checking contacts\n  const checkContacts = async () => {\n    setChecking(true);\n    let data = window.localStorage.getItem(\"contactTracing\");\n    data = JSON.parse(data);\n    let dataNew = [];\n    let alert = false;\n    if (!!data) {\n      for (let i = 0; i < data.length; i++) {\n        try {\n          const res = await reg\n            .checkHealth(data[i].personal, data[i].contact)\n            .call({ from: window.conflux.selectedAddress });\n\n          //filtering out old data\n          console.log(moment().diff(data[i].timestamp, \"days\"));\n          if (moment().diff(data[i].timestamp, \"days\") < 28) {\n            dataNew.push(data[i]);\n          }\n\n          //set alert to true if infected contact (could use algorithm to determine risk level)\n          if (!res) {\n            alert = true;\n          }\n        } catch (e) {\n          console.log(\"Invalid pair\");\n        }\n      }\n    }\n    const output = alert ? \"Infected Contact\" : \"No Issues\"\n    setStatus(output);\n    setChecking(false);\n  };\n\n  return (\n    <React.Fragment>\n      <Box pb={3}>\n        <Typography variant=\"caption\">\n          Please report any updates to your health:\n        </Typography>\n        <Typography variant=\"h6\" color={colorPicker(healthy)}>\n          Healthy:{\" \"}\n          {healthy === \"--\" ? (\n            <CircularProgress\n              variant=\"indeterminate\"\n              className=\"health-circularProgress\"\n            />\n          ) : (\n            healthy\n          )}\n        </Typography>\n        <Button\n          variant=\"contained\"\n          size=\"large\"\n          className=\"Button\"\n          onClick={toggleHealth}\n          color=\"primary\"\n        >\n          Toggle Health\n        </Button>\n      </Box>\n      <Box>\n        <Typography variant=\"caption\">\n          Check if contact has been infected:{\" \"}\n        </Typography>\n        <Typography variant=\"h6\" color={colorPicker(status)}>\n          Status:{\" \"}\n          {checking ? (\n            <CircularProgress\n              variant=\"indeterminate\"\n              className=\"health-circularProgress\"\n            />\n          ) : (\n            status\n          )}\n        </Typography>\n        <Button\n          variant=\"contained\"\n          size=\"large\"\n          className=\"Button\"\n          onClick={checkContacts}\n          color=\"primary\"\n        >\n          Check Contacts\n        </Button>\n      </Box>\n    </React.Fragment>\n  );\n};\n\nexport default HealthPage;\n","import React from \"react\";\nimport \"./App.css\";\nimport CardContainer from \"./components/CardContainer/CardContainer\";\nimport ConnectPage from \"./components/ConnectPage/ConnectPage\";\nimport ContactPage from \"./components/ContactPage/ContactPage\";\nimport HealthPage from \"./components/HealthPage/HealthPage\";\nconst abi = require(\"./assets/registration-abi.json\");\nconst addresses = require(\"./assets/addresses.json\");\n\nfunction App() {\n  const [state, set] = React.useState(0);\n  const page = { state, set };\n  const [provider, setProvider] = React.useState();\n  const [regContract, setRegContract] = React.useState();\n  const [contractObj, setContract] = React.useState();\n  const indContract = { contractObj, setContract };\n\n  //checking if conflux portal is installed\n  React.useEffect(() => {\n    if (!!provider) {\n      set(1);\n      const contract = window.confluxJS.Contract({\n        abi,\n        address: addresses.registration,\n      });\n      setRegContract(contract);\n    }\n  }, [provider]);\n\n  return (\n    <div className=\"App\">\n      <CardContainer page={page} ind={contractObj}>\n        {page.state === 0 && (\n          <ConnectPage set={setProvider}/>\n        )}\n        {page.state === 1 && <ContactPage reg={regContract} ind={indContract}/>}\n        {page.state === 2 && <HealthPage reg={regContract} ind={contractObj}/>}\n      </CardContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}